import cv2
import mediapipe as mp
from send_to_car import send_command
import time

# MediaPipe setup
mpHands = mp.solutions.hands
hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mpDraw = mp.solutions.drawing_utils

# Wi-Fi connection check
connected = False
try:
    send_command("BATTERY")  # Test command to see if ESP32 is reachable
    connected = True
except:
    connected = False

# Gesture stability variables
lastCommandTime = 0
commandDelay = 0.5  # seconds
lastCommand = ""
lastCommandDisplayTime = 0
commandDisplayDuration = 1.0  # seconds

# Start camera
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)

# Gesture-to-car command
def RCCAR(total):
    global lastCommandTime, lastCommand, lastCommandDisplayTime
    currentTime = time.time()

    if currentTime - lastCommandTime < commandDelay:
        return lastCommand  # Skip repeated commands

    try:
        if total == 0:
            send_command("STOP")
            lastCommand = "Brake"
        elif total == 2:
            send_command("RIGHT")
            lastCommand = "Right"
        elif total == 3:
            send_command("LEFT")
            lastCommand = "Left"
        elif total == 5:
            send_command("FORWARD")
            lastCommand = "Forward"
        elif total == 4:
            send_command("BACK")
            lastCommand = "Reverse"
        else:
            lastCommand = ""
    except Exception as e:
        print("❌ Error sending command:", e)

    lastCommandTime = currentTime
    lastCommandDisplayTime = currentTime
    return lastCommand

# Main loop
while True:
    success, img = cap.read()
    if not success:
        continue

    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    result = hands.process(imgRGB)
    command = ""

    if result.multi_hand_landmarks:
        handLms = result.multi_hand_landmarks[0]
        lmList = [(int(lm.x * img.shape[1]), int(lm.y * img.shape[0])) for lm in handLms.landmark]

        if lmList:
            totalFingers = 0
            fingerTips = [8, 12, 16, 20]

            if lmList[4][0] < lmList[3][0]:  # Thumb
                totalFingers += 1
            for tip in fingerTips:
                if lmList[tip][1] < lmList[tip - 2][1]:
                    totalFingers += 1

            command = RCCAR(totalFingers)

        mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

    # 🟥 Display "Welcome" in red at top
    cv2.putText(img, "Welcome", (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 255), 3)

    # 🟦 Show last gesture command
    if time.time() - lastCommandDisplayTime < commandDisplayDuration:
        cv2.putText(img, lastCommand, (20, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 0, 0), 3)

    # 🖥️ Full screen display
    cv2.namedWindow("Gesture Control", cv2.WND_PROP_FULLSCREEN)
    cv2.setWindowProperty("Gesture Control", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
    cv2.imshow("Gesture Control", img)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
